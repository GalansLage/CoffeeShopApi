// <auto-generated />
using System;
using CoffeeShopApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CoffeeShopApi.Migrations
{
    [DbContext(typeof(CoffeeShopContext))]
    [Migration("20250510033224_InitialMigrate")]
    partial class InitialMigrate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CoffeeShopApi.Data.Entities.ClientEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Ci")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("ClientLastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime>("DeletedTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateUtc")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Ci")
                        .IsUnique();

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("CoffeeShopApi.Data.Entities.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DeletedTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateUtc")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Payment")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPaid")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPay")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("CoffeeShopApi.Data.Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Availability")
                        .HasColumnType("integer");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DeletedTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("character varying(125)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateUtc")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Availability = 50,
                            Category = 1,
                            DeletedTimeUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Café negro preparado con agua caliente.",
                            IsDeleted = false,
                            LastUpdateUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Picture = new byte[0],
                            Price = 223,
                            ProductName = "Café Americano"
                        },
                        new
                        {
                            Id = 2,
                            Availability = 30,
                            Category = 1,
                            DeletedTimeUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Café espresso con leche vaporizada.",
                            IsDeleted = false,
                            LastUpdateUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Picture = new byte[0],
                            Price = 343,
                            ProductName = "Café Latte"
                        },
                        new
                        {
                            Id = 3,
                            Availability = 40,
                            Category = 1,
                            DeletedTimeUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Café espresso con leche vaporizada y espuma de leche.",
                            IsDeleted = false,
                            LastUpdateUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Picture = new byte[0],
                            Price = 412,
                            ProductName = "Capuchino"
                        },
                        new
                        {
                            Id = 4,
                            Availability = 60,
                            Category = 1,
                            DeletedTimeUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Té verde natural con un toque de miel.",
                            IsDeleted = false,
                            LastUpdateUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Picture = new byte[0],
                            Price = 299,
                            ProductName = "Té Verde"
                        },
                        new
                        {
                            Id = 5,
                            Availability = 20,
                            Category = 0,
                            DeletedTimeUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Muffin esponjoso con arándanos frescos.",
                            IsDeleted = false,
                            LastUpdateUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Picture = new byte[0],
                            Price = 399,
                            ProductName = "Muffin de Arándanos"
                        },
                        new
                        {
                            Id = 6,
                            Availability = 25,
                            Category = 0,
                            DeletedTimeUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Croissant crujiente hecho con mantequilla pura.",
                            IsDeleted = false,
                            LastUpdateUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Picture = new byte[0],
                            Price = 299,
                            ProductName = "Croissant de Mantequilla"
                        },
                        new
                        {
                            Id = 7,
                            Availability = 15,
                            Category = 2,
                            DeletedTimeUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sándwich clásico con jamón, queso y vegetales frescos.",
                            IsDeleted = false,
                            LastUpdateUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Picture = new byte[0],
                            Price = 599,
                            ProductName = "Sándwich de Jamón y Queso"
                        },
                        new
                        {
                            Id = 8,
                            Availability = 10,
                            Category = 2,
                            DeletedTimeUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ensalada fresca con pollo, crutones y aderezo César.",
                            IsDeleted = false,
                            LastUpdateUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Picture = new byte[0],
                            Price = 699,
                            ProductName = "Ensalada César"
                        },
                        new
                        {
                            Id = 9,
                            Availability = 35,
                            Category = 1,
                            DeletedTimeUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Jugo recién exprimido de naranjas frescas.",
                            IsDeleted = false,
                            LastUpdateUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Picture = new byte[0],
                            Price = 399,
                            ProductName = "Jugo de Naranja Natural"
                        },
                        new
                        {
                            Id = 10,
                            Availability = 18,
                            Category = 0,
                            DeletedTimeUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Brownie rico y esponjoso con trozos de chocolate.",
                            IsDeleted = false,
                            LastUpdateUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Picture = new byte[0],
                            Price = 499,
                            ProductName = "Brownie de Chocolate"
                        },
                        new
                        {
                            Id = 11,
                            Availability = 40,
                            Category = 1,
                            DeletedTimeUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Café espresso con chocolate y leche vaporizada.",
                            IsDeleted = false,
                            LastUpdateUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Picture = new byte[0],
                            Price = 499,
                            ProductName = "Café Mocha"
                        },
                        new
                        {
                            Id = 12,
                            Availability = 55,
                            Category = 1,
                            DeletedTimeUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Té de manzana con un toque de canela.",
                            IsDeleted = false,
                            LastUpdateUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Picture = new byte[0],
                            Price = 299,
                            ProductName = "Té de Manzana"
                        },
                        new
                        {
                            Id = 13,
                            Availability = 20,
                            Category = 2,
                            DeletedTimeUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bagel fresco con queso crema suave.",
                            IsDeleted = false,
                            LastUpdateUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Picture = new byte[0],
                            Price = 399,
                            ProductName = "Bagel con Queso Crema"
                        },
                        new
                        {
                            Id = 14,
                            Availability = 30,
                            Category = 0,
                            DeletedTimeUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Galletas caseras de avena con pasas.",
                            IsDeleted = false,
                            LastUpdateUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Picture = new byte[0],
                            Price = 299,
                            ProductName = "Galletas de Avena"
                        },
                        new
                        {
                            Id = 15,
                            Availability = 25,
                            Category = 1,
                            DeletedTimeUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Smoothie refrescante con mezcla de frutas tropicales.",
                            IsDeleted = false,
                            LastUpdateUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Picture = new byte[0],
                            Price = 599,
                            ProductName = "Smoothie de Frutas"
                        });
                });

            modelBuilder.Entity("CoffeeShopApi.Data.Entities.OrderEntity", b =>
                {
                    b.HasOne("CoffeeShopApi.Data.Entities.ClientEntity", "Client")
                        .WithOne("Order")
                        .HasForeignKey("CoffeeShopApi.Data.Entities.OrderEntity", "ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CoffeeShopApi.Data.Entities.ProductEntity", b =>
                {
                    b.HasOne("CoffeeShopApi.Data.Entities.OrderEntity", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CoffeeShopApi.Data.Entities.ClientEntity", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShopApi.Data.Entities.OrderEntity", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
